{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\aminecharot\\\\Documents\\\\personal\\\\front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  signOut() {}\n\n  signInWithMetaMask() {\n    var _this = this;\n\n    let ethereum;\n    return from(detectEthereumProvider()).pipe(switchMap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (provider) {\n        if (!provider) {\n          throw new Error('Please install MetaMask');\n        }\n\n        ethereum = provider;\n        return yield ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()), switchMap(() => this.http.post('https://toornamentapiauth.azurewebsites.net/api/getnonce', {\n      address: ethereum.selectedAddress\n    })), switchMap( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (response) {\n        return yield ethereum.request({\n          method: 'personal_sign',\n          params: [`0x${_this.toHex(response.nonce)}`, ethereum.selectedAddress]\n        });\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()), switchMap(sig => this.http.post('https://toornamentauthapi.azurewebsites.net/api/validateauth', {\n      address: ethereum.selectedAddress,\n      signature: sig\n    })), switchMap( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (response) {\n        return localStorage.setItem('access_token', response);\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n  }\n\n  toHex(stringToConvert) {\n    return stringToConvert.split('').map(c => c.charCodeAt(0).toString(16).padStart(2, '0')).join('');\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/aminecharot/Documents/personal/front/src/app/auth.service.ts"],"names":["from","switchMap","detectEthereumProvider","i0","i1","AuthService","constructor","http","signOut","signInWithMetaMask","ethereum","pipe","provider","Error","request","method","post","address","selectedAddress","response","params","toHex","nonce","sig","signature","localStorage","setItem","stringToConvert","split","map","c","charCodeAt","toString","padStart","join","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACDC,EAAAA,OAAO,GAAG,CACT;;AACDC,EAAAA,kBAAkB,GAAG;AAAA;;AACjB,QAAIC,QAAJ;AACA,WAAOV,IAAI,CAACE,sBAAsB,EAAvB,CAAJ,CAA+BS,IAA/B,CAAoCV,SAAS;AAAA,mCAAC,WAAOW,QAAP,EAAoB;AACrE,YAAI,CAACA,QAAL,EAAe;AACX,gBAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACDH,QAAAA,QAAQ,GAAGE,QAAX;AACA,qBAAaF,QAAQ,CAACI,OAAT,CAAiB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAjB,CAAb;AACH,OANmD;;AAAA;AAAA;AAAA;AAAA,QAA7C,EAMHd,SAAS,CAAC,MAAM,KAAKM,IAAL,CAAUS,IAAV,CAAe,0DAAf,EAA2E;AAC3FC,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AADyE,KAA3E,CAAP,CANN,EAQFjB,SAAS;AAAA,oCAAC,WAAOkB,QAAP;AAAA,qBAA0BT,QAAQ,CAACI,OAAT,CAAiB;AACtDC,UAAAA,MAAM,EAAE,eAD8C;AAEtDK,UAAAA,MAAM,EAAE,CACH,KAAI,KAAI,CAACC,KAAL,CAAWF,QAAQ,CAACG,KAApB,CAA2B,EAD5B,EAEJZ,QAAQ,CAACQ,eAFL;AAF8C,SAAjB,CAA1B;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,QARP,EAcFjB,SAAS,CAAEsB,GAAD,IAAS,KAAKhB,IAAL,CAAUS,IAAV,CAAe,8DAAf,EAA+E;AAAEC,MAAAA,OAAO,EAAEP,QAAQ,CAACQ,eAApB;AAAqCM,MAAAA,SAAS,EAAED;AAAhD,KAA/E,CAAV,CAdP,EAcyJtB,SAAS;AAAA,oCAAC,WAAOkB,QAAP;AAAA,eAAoBM,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCP,QAArC,CAApB;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,QAdlK,CAAP;AAeH;;AACDE,EAAAA,KAAK,CAACM,eAAD,EAAkB;AACnB,WAAOA,eAAe,CACjBC,KADE,CACI,EADJ,EAEFC,GAFE,CAEGC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,EAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAFT,EAGFC,IAHE,CAGG,EAHH,CAAP;AAIH;;AA7BoB;;AA+BzB7B,WAAW,CAAC8B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIhC,WAAV,EAAuBF,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAlC,WAAW,CAACmC,KAAZ,GAAoB,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,WAAT;AAAsBsC,EAAAA,OAAO,EAAEtC,WAAW,CAAC8B,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { from } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    signOut() {\r\n    }\r\n    signInWithMetaMask() {\r\n        let ethereum;\r\n        return from(detectEthereumProvider()).pipe(switchMap(async (provider) => {\r\n            if (!provider) {\r\n                throw new Error('Please install MetaMask');\r\n            }\r\n            ethereum = provider;\r\n            return await ethereum.request({ method: 'eth_requestAccounts' });\r\n        }), switchMap(() => this.http.post('https://toornamentapiauth.azurewebsites.net/api/getnonce', {\r\n            address: ethereum.selectedAddress\r\n        })), switchMap(async (response) => await ethereum.request({\r\n            method: 'personal_sign',\r\n            params: [\r\n                `0x${this.toHex(response.nonce)}`,\r\n                ethereum.selectedAddress,\r\n            ],\r\n        })), switchMap((sig) => this.http.post('https://toornamentauthapi.azurewebsites.net/api/validateauth', { address: ethereum.selectedAddress, signature: sig })), switchMap(async (response) => localStorage.setItem('access_token', response)));\r\n    }\r\n    toHex(stringToConvert) {\r\n        return stringToConvert\r\n            .split('')\r\n            .map((c) => c.charCodeAt(0).toString(16).padStart(2, '0'))\r\n            .join('');\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}