{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\aminecharot\\\\Documents\\\\personal\\\\front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport detectEthereumProvider from '@metamask/detect-provider';\nlet AuthService = class AuthService {\n  constructor(http, loadingScreenService) {\n    this.http = http;\n    this.loadingScreenService = loadingScreenService;\n  }\n\n  signOut() {}\n\n  signInWithMetaMask() {\n    var _this = this;\n\n    this.loadingScreenService.startLoading();\n    let ethereum;\n    return from(detectEthereumProvider()).pipe(switchMap( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (provider) {\n        if (!provider) {\n          throw new Error('Please install MetaMask');\n        }\n\n        ethereum = provider;\n        return yield ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()), switchMap(() => this.http.post('https://toornamentapiauth.azurewebsites.net/api/getnonce', {\n      address: ethereum.selectedAddress\n    })), switchMap( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (response) {\n        return yield ethereum.request({\n          method: 'personal_sign',\n          params: [`0x${_this.toHex(response.nonce)}`, ethereum.selectedAddress]\n        });\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()), switchMap(sig => this.http.post('https://toornamentauthapi.azurewebsites.net/api/validateauth', {\n      address: ethereum.selectedAddress,\n      signature: sig\n    })), switchMap( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (response) {\n        return localStorage.setItem('access_token', response.token);\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n  }\n\n  toHex(stringToConvert) {\n    return stringToConvert.split('').map(c => c.charCodeAt(0).toString(16).padStart(2, '0')).join('');\n  }\n\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"sources":["C:/Users/aminecharot/Documents/personal/front/src/app/auth.service.ts"],"names":["__decorate","Injectable","from","switchMap","detectEthereumProvider","AuthService","constructor","http","loadingScreenService","signOut","signInWithMetaMask","startLoading","ethereum","pipe","provider","Error","request","method","post","address","selectedAddress","response","params","toHex","nonce","sig","signature","localStorage","setItem","token","stringToConvert","split","map","c","charCodeAt","toString","padStart","join","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,IAAIC,WAAW,GAAG,MAAMA,WAAN,CAAkB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,oBAAP,EAA6B;AACpC,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACH;;AACDC,EAAAA,OAAO,GAAG,CACT;;AACDC,EAAAA,kBAAkB,GAAG;AAAA;;AACjB,SAAKF,oBAAL,CAA0BG,YAA1B;AACA,QAAIC,QAAJ;AACA,WAAOV,IAAI,CAACE,sBAAsB,EAAvB,CAAJ,CAA+BS,IAA/B,CAAoCV,SAAS;AAAA,mCAAC,WAAOW,QAAP,EAAoB;AACrE,YAAI,CAACA,QAAL,EAAe;AACX,gBAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACDH,QAAAA,QAAQ,GAAGE,QAAX;AACA,qBAAaF,QAAQ,CAACI,OAAT,CAAiB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAjB,CAAb;AACH,OANmD;;AAAA;AAAA;AAAA;AAAA,QAA7C,EAMHd,SAAS,CAAC,MAAM,KAAKI,IAAL,CAAUW,IAAV,CAAe,0DAAf,EAA2E;AAC3FC,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AADyE,KAA3E,CAAP,CANN,EAQFjB,SAAS;AAAA,oCAAC,WAAOkB,QAAP;AAAA,qBAA0BT,QAAQ,CAACI,OAAT,CAAiB;AACtDC,UAAAA,MAAM,EAAE,eAD8C;AAEtDK,UAAAA,MAAM,EAAE,CACH,KAAI,KAAI,CAACC,KAAL,CAAWF,QAAQ,CAACG,KAApB,CAA2B,EAD5B,EAEJZ,QAAQ,CAACQ,eAFL;AAF8C,SAAjB,CAA1B;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,QARP,EAcFjB,SAAS,CAAEsB,GAAD,IAAS,KAAKlB,IAAL,CAAUW,IAAV,CAAe,8DAAf,EAA+E;AAAEC,MAAAA,OAAO,EAAEP,QAAQ,CAACQ,eAApB;AAAqCM,MAAAA,SAAS,EAAED;AAAhD,KAA/E,CAAV,CAdP,EAcyJtB,SAAS;AAAA,oCAAC,WAAOkB,QAAP;AAAA,eAAoBM,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCP,QAAQ,CAACQ,KAA9C,CAApB;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,QAdlK,CAAP;AAeH;;AACDN,EAAAA,KAAK,CAACO,eAAD,EAAkB;AACnB,WAAOA,eAAe,CACjBC,KADE,CACI,EADJ,EAEFC,GAFE,CAEGC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,EAA6BC,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAFT,EAGFC,IAHE,CAGG,EAHH,CAAP;AAIH;;AA/B+B,CAApC;AAiCAhC,WAAW,GAAGL,UAAU,CAAC,CACrBC,UAAU,CAAC;AACPqC,EAAAA,UAAU,EAAE;AADL,CAAD,CADW,CAAD,EAIrBjC,WAJqB,CAAxB;AAKA,SAASA,WAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\nlet AuthService = class AuthService {\r\n    constructor(http, loadingScreenService) {\r\n        this.http = http;\r\n        this.loadingScreenService = loadingScreenService;\r\n    }\r\n    signOut() {\r\n    }\r\n    signInWithMetaMask() {\r\n        this.loadingScreenService.startLoading();\r\n        let ethereum;\r\n        return from(detectEthereumProvider()).pipe(switchMap(async (provider) => {\r\n            if (!provider) {\r\n                throw new Error('Please install MetaMask');\r\n            }\r\n            ethereum = provider;\r\n            return await ethereum.request({ method: 'eth_requestAccounts' });\r\n        }), switchMap(() => this.http.post('https://toornamentapiauth.azurewebsites.net/api/getnonce', {\r\n            address: ethereum.selectedAddress\r\n        })), switchMap(async (response) => await ethereum.request({\r\n            method: 'personal_sign',\r\n            params: [\r\n                `0x${this.toHex(response.nonce)}`,\r\n                ethereum.selectedAddress,\r\n            ],\r\n        })), switchMap((sig) => this.http.post('https://toornamentauthapi.azurewebsites.net/api/validateauth', { address: ethereum.selectedAddress, signature: sig })), switchMap(async (response) => localStorage.setItem('access_token', response.token)));\r\n    }\r\n    toHex(stringToConvert) {\r\n        return stringToConvert\r\n            .split('')\r\n            .map((c) => c.charCodeAt(0).toString(16).padStart(2, '0'))\r\n            .join('');\r\n    }\r\n};\r\nAuthService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root',\r\n    })\r\n], AuthService);\r\nexport { AuthService };\r\n"]},"metadata":{},"sourceType":"module"}