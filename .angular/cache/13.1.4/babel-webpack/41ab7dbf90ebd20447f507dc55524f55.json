{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\aminecharot\\\\Documents\\\\personal\\\\front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    signOut() {}\n\n    signInWithMetaMask() {\n      var _this = this;\n\n      let ethereum;\n      return from(detectEthereumProvider()).pipe(switchMap( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (provider) {\n          if (!provider) {\n            throw new Error('Please install MetaMask');\n          }\n\n          ethereum = provider;\n          return yield ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()), switchMap(() => this.http.post('https://toornamentapiauth.azurewebsites.net/api/getnonce', {\n        address: ethereum.selectedAddress\n      })), switchMap( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (response) {\n          return yield ethereum.request({\n            method: 'personal_sign',\n            params: [`0x${_this.toHex(response.nonce)}`, ethereum.selectedAddress]\n          });\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()), switchMap(sig => this.http.post('https://toornamentauthapi.azurewebsites.net/api/validateauth', {\n        address: ethereum.selectedAddress,\n        signature: sig\n      })), switchMap( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (response) {\n          localStorage.setItem('access_token', response.token);\n          localStorage.setItem('address', response.address);\n          localStorage.setItem('playerName', response.playerName);\n        });\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n    }\n\n    toHex(stringToConvert) {\n      return stringToConvert.split('').map(c => c.charCodeAt(0).toString(16).padStart(2, '0')).join('');\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}